{"ast":null,"code":"import { USER_LIST_REQUEST, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT } from \"../Constants/UserContants\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\"; // LOGIN\n\nexport const login = (email, password) => async dispatch => {\n  const Toastobjects = {\n    pauseOnFocusLoss: false,\n    draggable: false,\n    pauseOnHover: false,\n    autoClose: 2000\n  };\n\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/users/login`, {\n      email,\n      password\n    }, config);\n\n    if (!data.isAdmin == true) {\n      toast.error(\"You are not Admin!\", Toastobjects);\n      dispatch({\n        type: USER_LOGIN_FAIL\n      });\n    } else {\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n    }\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: message\n    });\n  }\n}; // LOGOUT\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n}; // ALL USER\n\nexport const listUser = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const config = ({\n      userLogin: {\n        userInfo\n      }\n    } = getState());\n    const {\n      data\n    } = await axios.post(`/api/users/login`, {\n      email,\n      password\n    }, config);\n\n    if (!data.isAdmin == true) {\n      toast.error(\"You are not Admin!\", Toastobjects);\n      dispatch({\n        type: USER_LOGIN_FAIL\n      });\n    } else {\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n    }\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/var/www/html/al119bar/dashboard/src/Redux/Actions/userActions.js"],"names":["USER_LIST_REQUEST","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","axios","toast","login","email","password","dispatch","Toastobjects","pauseOnFocusLoss","draggable","pauseOnHover","autoClose","type","config","headers","data","post","isAdmin","error","payload","localStorage","setItem","JSON","stringify","message","response","logout","removeItem","listUser","getState","userLogin","userInfo"],"mappings":"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","sourcesContent":["import {\r\n  USER_LIST_REQUEST,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n} from \"../Constants/UserContants\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// LOGIN\r\nexport const login = (email, password) => async (dispatch) => {\r\n\r\n  const Toastobjects = {\r\n      pauseOnFocusLoss: false,\r\n      draggable: false,\r\n      pauseOnHover: false,\r\n      autoClose: 2000,\r\n  };\r\n\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      `/api/users/login`,\r\n      { email, password },\r\n      config\r\n    );\r\n\r\n      if(!data.isAdmin == true){\r\n        toast.error(\"You are not Admin!\", Toastobjects);\r\n        dispatch({\r\n          type: USER_LOGIN_FAIL,\r\n        });\r\n        \r\n      }else{\r\n        dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n      }\r\n\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\n// LOGOUT\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem(\"userInfo\");\r\n  dispatch({ type: USER_LOGOUT });\r\n};\r\n\r\n\r\n\r\n// ALL USER\r\nexport const listUser = () => async (dispatch, getState) => {\r\n\r\n  try {\r\n    dispatch({ type: USER_LIST_REQUEST });\r\n\r\n    const config = {\r\n      userLogin:{userInfo},\r\n    }= getState();\r\n\r\n    const { data } = await axios.post(\r\n      `/api/users/login`,\r\n      { email, password },\r\n      config\r\n    );\r\n\r\n      if(!data.isAdmin == true){\r\n        toast.error(\"You are not Admin!\", Toastobjects);\r\n        dispatch({\r\n          type: USER_LOGIN_FAIL,\r\n        });\r\n        \r\n      }else{\r\n        dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n      }\r\n\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}